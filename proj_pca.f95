	program inputreader
	IMPLICIT NONE
	integer :: nfrs,n
	open(unit=5,file="protname.txt",status='old')
	read(5,*)
	read(5,*)n
	read(5,*)nfrs
	close(5)
	!nfrs=5000 !Testing
	write(*,*)n,nfrs
	!call assignmass(n)
	WRITE(*,*)n,nfrs
	!call umatrix(n,nfrs)
	WRITE(*,*)n,nfrs
	call project(n,nfrs)
	STOP
	End program inputreader

	subroutine assignmass(n)
	IMPLICIT NONE
	INTEGER :: i,j,k,nres,rnum,anum,natoms,ntot
	INTEGER,INTENT(in) :: n
	REAL :: mass
	character(16)crap,atype,restype,chain,aat,protname
	character(128)line
	!Write amino acid masses to file
	mass=0.0
	natoms=0.0
	open(unit=2,file="protname.txt",status='old')
	read(2,*)protname
	READ(2,*)
	READ(2,*)
	READ(2,*)natoms
	close(2)
	protname=adjustl(protname)
	open(unit=13,file=trim(protname)//"_first.pdb")
	open(unit=23,file="resmass.dat")
	ntot=0
	mass=0.0
	do i=1,5 !True if generated by gmx trjconv
	  read(13,'(A)')line
	end do
	do i=1,natoms
	  read(13,*)crap,anum,atype,restype,chain,rnum !Assuming a single chain
	  if(atype(1:2).eq."CA")then
	    !All masses are in amu and are taken from the NIST Chemistry WebBook, SRD 69
	    if(restype(1:3).eq."ALA")mass=71.09 
	    if(restype(1:3).eq."ARG")mass=156.19
	    if(restype(1:3).eq."ASN")mass=115.09
	    if(restype(1:3).eq."ASP")mass=114.11
	    if(restype(1:3).eq."CYS")mass=103.15
	    if(restype(1:3).eq."GLN")mass=128.14
	    if(restype(1:3).eq."GLU")mass=129.12
	    if(restype(1:3).eq."GLY")mass=57.05
	    if(restype(1:3).eq."HIS")mass=137.14 
	    if(restype(1:3).eq."ILE")mass=113.16
	    if(restype(1:3).eq."LEU")mass=113.16
	    if(restype(1:3).eq."LYS")mass=128.17
	    if(restype(1:3).eq."MET")mass=131.19
	    if(restype(1:3).eq."PHE")mass=147.18
	    if(restype(1:3).eq."PRO")mass=97.12
	    if(restype(1:3).eq."SER")mass=87.08
	    if(restype(1:3).eq."THR")mass=101.11
	    if(restype(1:3).eq."TRP")mass=186.12
	    if(restype(1:3).eq."TYR")mass=163.18
	    if(restype(1:3).eq."VAL")mass=99.14
	    write(23,*)mass
	  end if
	end do
	close(13)
	CLOSE(23)

	end subroutine

	subroutine umatrix(n,nfrs)
	IMPLICIT NONE
	integer :: i,j,k,imin,jmin,a,nfe,ir,nbinsrot,imad,imadmid,io,ion,l,m,b
	INTEGER, INTENT(in) :: n,nfrs
	INTEGER :: xicount,xjcount,xcount,ycount,zcount,mineig(1),order(3*n+1)
	INTEGER :: yicount,yjcount,zicount,zjcount,icount,jcount,xlcount,ylcount,zlcount
	INTEGER :: xmcount,ymcount,zmcount,counter
	DOUBLE PRECISION, dimension(n,nfrs) :: lx,ly,lz,lmag,rx,ry,rz
	DOUBLE PRECISION, dimension(3*n,n) :: bigQ,bigQINV
	DOUBLE PRECISION, dimension(3*n,nfrs) :: dipcorr,bigxilist
	DOUBLE PRECISION :: biglist(3*n,nfrs)
	real dotpij,um,rrij,bl,hrtheta,hrphi,Rb,T
	integer itheta,iphi,ioL
	DOUBLE PRECISION :: sumx(n),sumy(n),sumz(n),summa(n),R(3*n,3*n),RT(3*n,3*n),pi
	DOUBLE PRECISION :: avgx(n),avgy(n),avgz(n),c(3*n,3*n),work(3*n*3*n),Atest(3*n,3*n)
	DOUBLE PRECISION :: eiglam(3*n),eiglamI(3*n),eiglamO(3*n),mass(3*n),dummy,ipiv(3*n+1)
	DOUBLE PRECISION :: RO(3*n,3*n),cLE(3*n,3*n),Q(n,n),QINV(n,n),pc(3*n,nfrs),rxref(n,nfrs)
	DOUBLE PRECISION :: ryref(n,nfrs),rzref(n,nfrs),PCL(3*n,nfrs),ROL(3*n,3*n),RL(3*n,3*n),RLT(3*n,3*n)
	DOUBLE PRECISION :: workL(3*n,3*n),AtestL(3*n,3*n),eiglamL(3*n),eiglamOL(3*n),eiglamIL(3*n),covar(3*n,3*n)
	DOUBLE PRECISION :: xix(n,nfrs),xiy(n,nfrs),xiz(n,nfrs),xim(n,nfrs),cLE2(3*n,3*n),ximavg(n),xi(n,nfrs),xiavg(n)
	DOUBLE PRECISION :: xixavg(n),xiyavg(n),xizavg(n),xixref(n,nfrs),xiyref(n,nfrs),xizref(n,nfrs)
	DOUBLE PRECISION :: PCxavg(3*n),PCyavg(3*n),PCzavg(3*n),PCavg(3*n),PCmavg(3*n),PCx(3*n,nfrs),PCy(3*n,nfrs)
	DOUBLE PRECISION :: PCz(3*n,nfrs),pcvec(3*n,nfrs),PCm(3*n,nfrs),xfluct(3*n),yfluct(3*n),zfluct(3*n)
	character(16)aa,ii,cbins
	CHARACTER(32) :: protname
	real hisp,hismax,delha,rdeg,degr,hnorm(n),x,y,z,emad
	Rb=.00198 !(boltzmanns constant in kcal/mol*K)
	open(unit=10,file='temp')
	read(10,*)T
	close(10)
	covar=0.0
	PCL=0.0
	RLT=0.0
	RL=0.0
	RO=0.0
	eiglamL=0.0
	eiglamOL=0.0
	ROL=0.0
	pc=0.0
	Q=0.0
	QINV=0.0
	cLE=0.0
	ion=0
	ipiv=0.0
	hisp=100.0
	pi=3.1415927	
	R=0.0
	RT=0.0
	biglist=0.0
	!open(unit=21,file='RT_matrix.dat',status='old')
	!do i=1,3*n
	!  do j=1,3*n
	!    read(21,*)RT(i,j)
	!  end do
	!end do
	open(unit=5,file="protname.txt",status='old')
	read(5,'(A)')protname
	close(5)
	rx=0.0
	ry=0.0
	rz=0.0
	lx=0.0
	ly=0.0
	lz=0.0
	mass=0.0
	!read from trajectory
	open(unit=11,file=trim(protname)//'.g96',status='old')
	!skip first 7,now read and calculate stuff
	do i=1,7
	  read(11,*)
	end do
	sumx=0.0
	sumy=0.0
	sumz=0.0
	summa=0.0
	do k=1,nfrs
	  IF(MOD(k,500) .EQ. 0)WRITE(*,*)'Reading frame ',k
	  do j=1,n
	    read(11,*)rx(j,k),ry(j,k),rz(j,k)
	    sumx(j)=sumx(j)+rx(j,k)
	    sumy(j)=sumy(j)+ry(j,k)
	    sumz(j)=sumz(j)+rz(j,k)
	  end do
	  do j=1,n-1
	    lx(j,k)=rx(j+1,k)-rx(j,k)
	    ly(j,k)=ry(j+1,k)-ry(j,k)
	    lz(j,k)=rz(j+1,k)-rz(j,k)
	  end do

	!skip 8 lines
	  do j=1,8
	    read(11,*)
	  end do
	!come out of time loop
	end do

	!Calculate averages and generate the covariance matrix
	avgx=0.0
	avgy=0.0
	avgz=0.0
	c=0.0

	OPEN(unit=24,file='avg_coor',status='unknown')
	DO i=1,n ! Average coordinates of each residue
	  avgx(i)=sumx(i)/REAL(nfrs)
	  avgy(i)=sumy(i)/REAL(nfrs)
	  avgz(i)=sumz(i)/REAL(nfrs)
	  WRITE(*,*)avgx(i),avgy(i),avgz(i)
	  WRITE(24,*)avgx(i),avgy(i),avgz(i)
	END DO
	CLOSE(24)
	rxref=0.0
	ryref=0.0
	rzref=0.0
	DO k=1,nfrs !Subtract reference values (here the average) from each coordinate
	  DO i=1,n
	    rxref(i,k)=rx(i,k)-avgx(i)
	    ryref(i,k)=ry(i,k)-avgy(i)
	    rzref(i,k)=rz(i,k)-avgz(i)
	  END DO
	END DO
	!Make big list of all augmented coordinates
	xcount=0
	ycount=0
	zcount=0
	WRITE(*,*)'Making the big list of coordinates...'
	OPEN(unit=24,file='biglist.dat',status='unknown')
	DO k=1,nfrs
	  DO i=1,3*n
	    IF(MOD(i,3) .EQ. 1)THEN
	      xcount=xcount+1
	      biglist(i,k)=rxref(xcount,k)
	    ELSE IF(MOD(i,3) .EQ. 2)THEN
	      ycount=ycount+1
	      biglist(i,k)=ryref(ycount,k)	
	    ELSE IF(MOD(i,3) .EQ. 0)THEN
	      zcount=zcount+1
	      biglist(i,k)=rzref(zcount,k)	 
	    END IF
	    WRITE(24,*)biglist(i,k)
	  END DO
	  !Reset counters after each time step
	  xcount=0
	  ycount=0
	  zcount=0
	END DO  
	CLOSE(24) 
	CLOSE(11)
	!Now, construct the covariance matrix
	OPEN(unit=3,file='covariance_matrix.dat',status='unknown')
	!Check if a mass-weighted analysis is desired
	io=0 !If io=0, no mass-weighting
	OPEN(unit=11,file='mwa.dat',status='old')
	READ(11,*)ion
	CLOSE(11)
	OPEN(unit=23,file='resmass.dat',status='old')
	DO i=1,3*n
	  IF(MOD(i,3)+1 .EQ. 1)THEN
            READ(23,*)dummy
	    mass(i)=dummy
	    mass(i+1)=dummy
	    mass(i+2)=dummy
	  END IF
	END DO
	CLOSE(23)
	IF(ion .EQ. 0)THEN !No mass-weighting
	  OPEN(unit=3,file='covariance_matrix.dat',status='unknown')
	  WRITE(*,*)'Performing a non-mass-weighted PC analysis.'
	  DO k=1,nfrs
	    IF(MOD(k,1000) .EQ. 0)WRITE(*,*)'Writing frame ',k,' for the covariance matrix.'
	    DO i=1,3*n
	      DO j=1,3*n
	        c(i,j)=c(i,j)+biglist(i,k)*biglist(j,k) !I think that's it!
	      END DO
	    END DO
	  END DO
	  !Normalize covariance matrix
	  icount=0
	  jcount=0
	  DO i=1,3*n
	    icount=icount+1
	    DO j=1,3*n
	      jcount=jcount+1
	      c(i,j)=c(i,j)/REAL(nfrs)
	      WRITE(3,*)c(i,j)
	    END DO
	  END DO
	ELSE IF (ion.EQ. 1) THEN !Mass-weighted analysis, GROMACS-style
	  OPEN(unit=3,file='covariance_matrix_mwa_GROMACS.dat',status='unknown')
	  WRITE(*,*)'Performing a mass-weighted PC analysis.'
	  DO k=1,nfrs
	    IF(MOD(k,1000) .EQ. 0)WRITE(*,*)'Writing frame ',k,' for the covariance matrix.'
	    DO i=1,3*n
	      DO j=1,3*n
	        c(i,j)=c(i,j)+biglist(i,k)*biglist(j,k) !I think that's it!
	      END DO
	    END DO
	  END DO
	  !Normalize covariance matrix
	  icount=0
	  jcount=0
	  DO i=1,3*n
	    icount=icount+1
	    DO j=1,3*n
	      jcount=jcount+1
              c(i,j)=SQRT(12.01)*SQRT(12.01)*c(i,j) !Kludge; assumes alpha-carbons
	      c(i,j)=c(i,j)/REAL(nfrs)
	      WRITE(3,*)c(i,j)
	    END DO
	  END DO
	ELSE IF (ion .EQ. 2) THEN !Mass-weighted analysis
	  OPEN(unit=3,file='covariance_matrix_mwa.dat',status='unknown')
	  WRITE(*,*)'Performing a mass-weighted PC analysis.'
	  DO k=1,nfrs
	    IF(MOD(k,1000) .EQ. 0)WRITE(*,*)'Writing frame ',k,' for the covariance matrix.'
	    DO i=1,3*n
	      DO j=1,3*n
	        c(i,j)=c(i,j)+biglist(i,k)*biglist(j,k) !I think that's it!
	      END DO
	    END DO
	  END DO
	  !Normalize covariance matrix
	  icount=0
	  jcount=0
	  DO i=1,3*n
	    icount=icount+1
	    DO j=1,3*n
	      jcount=jcount+1
              c(i,j)=SQRT(mass(i))*SQRT(mass(j))*c(i,j)
	      c(i,j)=c(i,j)/REAL(nfrs)
	      WRITE(3,*)c(i,j)
	    END DO
	  END DO
	END IF	
	CLOSE(3)

	!Next up:
	! 1) Generate the matrices of eigenvectors using LAPACK
	! 2) Find eigenvalues and order
	! 3) Write principal components to file
	! 4) Finalized LE4PD form of covaraince matrix
	!    and compare it to the one generated from the simulation

	!Find eigenvalues and the matrix of eigenvectors
	eiglam=0.0
	eiglamO=0.0
	call DGEEV("N","V",3*n,c,3*n,eiglam,eiglamI,Atest,3*n,R,3*n,work,3*n*3*n,io)
	WRITE(*,*)io
	open(unit=40,file='status')
	if(minval(eiglam).lt. 0.0) then
	  write(*,*)"lambda neg"
	  write(40,*)0
	else
	  write(*,*)"pos. def."
	  write(40,*)1

	!order eigenvalues and R based upon lambda eigs
	order=0
	eiglamO=0.0
	do i=1,3*n
	  eiglamO(i)=maxval(eiglam)
!	  write(*,*)minloc(eiglam)
	  mineig=maxloc(eiglam)
	  order(i)=mineig(1)
!	  write(*,*)eiglamO(i),order(i)
	  eiglam(order(i))=1D-20
	end do
	do i=1,3*n
	  eiglam(i)=eiglamO(i)
	end do

	RO=0.0
	do i=1,3*n
	  do j=1,3*n
	    RO(j,i)=R(j,order(i))
	  end do
	end do
	do i=1,3*n
	  do j=1,3*n
	    R(i,j)=RO(i,j)
	  end do
	end do


	!Invert Q
	DO i=1,3*n
	  DO j=1,3*n
	    RT(i,j)=R(j,i)
	  END DO
	END DO

	!assign eigenvectors to Rmatrix
	open(unit=10,file="Rmatrix",status='unknown')
	open(unit=11,file="RTmatrix",status='unknown')
	do i=1,3*n
	  do j=1,3*n
	    write(10,*)R(i,j)
	    write(11,*)RT(i,j)
	  end do
	end do
	close(10)
	close(11)

	!Projections
	DO j=1,10 !Write the first ten PCs to file
	   WRITE(aa,*)j
	   aa=adjustl(aa)
	   WRITE(*,*)'Writing principal component ',j,' to file.'
	   OPEN(unit=100+j,file='pc_traj_'//TRIM(aa)//'.dat',status='unknown')
	  DO k=1,nfrs
	    DO i=1,3*n
	      PC(j,k)=PC(j,k)+RT(j,i)*biglist(i,k)
	    END DO
	    WRITE(100+j,*)0.2*k,PC(j,k)
	  END DO
	  CLOSE(100+j)
	END DO

	!Write the average of the principal modes to file:
	WRITE(*,*)'Writing averages of the principal modes to file...'
	PCx=0.0
	PCy=0.0
	PCz=0.0
	PCm=0.0
	PCxavg=0.0
	PCyavg=0.0
	PCzavg=0.0
	PCmavg=0.0
	pcvec=0.0
	PCavg=0.0
	xfluct=0.0
	yfluct=0.0
	zfluct=0.0
	OPEN(unit=26,file='PCmavg_ref.dat',status='unknown')
	OPEN(unit=30,file='PCavg_ref.dat',status='unknown')
	DO a=1,3*n
	  WRITE(aa,*)a
	  aa=adjustl(aa)
	  IF(a .LE. 10)OPEN(unit=25,file='PC_'//TRIM(aa)//'.dat',status='unknown')
	  IF(a .LE. 10)OPEN(unit=27,file='PCx_'//TRIM(aa)//'.dat',status='unknown')
	  IF(a .LE. 10)OPEN(unit=28,file='PCy_'//TRIM(aa)//'.dat',status='unknown')
	  IF(a .LE. 10)OPEN(unit=29,file='PCz_'//TRIM(aa)//'.dat',status='unknown')
	  DO k=1,nfrs
	    DO j=1,3*n
	      IF(MOD(j,3) .EQ. 1)PCx(a,k)=RT(a,j)*biglist(j,k)+PCx(a,k)
	      IF(MOD(j,3) .EQ. 2)PCy(a,k)=RT(a,j)*biglist(j,k)+PCy(a,k)
	      IF(MOD(j,3) .EQ. 0)PCz(a,k)=RT(a,j)*biglist(j,k)+PCz(a,k)
	    end do
	    pcvec(a,k)=PCx(a,k)+PCy(a,k)+PCz(a,k)
	    PCm(a,k)=(PCx(a,k)**2+PCy(a,k)**2+PCz(a,k)**2)**.5
	    PCxavg(a)=PCxavg(a)+PCx(a,k)
	    PCyavg(a)=PCyavg(a)+PCy(a,k)
	    PCzavg(a)=PCzavg(a)+PCz(a,k)
	    PCmavg(a)=PCmavg(a)+PCm(a,k)
	    PCavg(a)=PCavg(a)+pcvec(a,k)
            xfluct(a)=PCx(a,k)**2+xfluct(a)
            yfluct(a)=PCy(a,k)**2+yfluct(a)
            zfluct(a)=PCz(a,k)**2+zfluct(a)
	    IF(a .LE. 10)WRITE(25,*)0.2*k,pcvec(a,k)
	    IF(a .LE. 10)WRITE(27,*)0.2*k,PCx(a,k)
	    IF(a .LE. 10)WRITE(28,*)0.2*k,PCy(a,k)
	    IF(a .LE. 10)WRITE(29,*)0.2*k,PCz(a,k)
	  END DO
	  IF(a .LE. 10)CLOSE(25)
	  IF(a .LE. 10)CLOSE(27)
	  IF(a .LE. 10)CLOSE(28)
	  IF(a .LE. 10)CLOSE(29)
	  PCxavg(a)=PCxavg(a)/REAL(nfrs)
	  PCyavg(a)=PCyavg(a)/REAL(nfrs)
	  PCzavg(a)=PCzavg(a)/REAL(nfrs)
	  PCmavg(a)=PCmavg(a)/REAL(nfrs)
          xfluct(a)=xfluct(a)/REAL(nfrs)
          yfluct(a)=yfluct(a)/REAL(nfrs)
          zfluct(a)=zfluct(a)/REAL(nfrs)
	  WRITE(26,*)a,PCmavg(a)
	  PCavg(a)=PCavg(a)/REAL(nfrs)
	  WRITE(30,*)a,ABS(PCavg(a))
	END DO
	CLOSE(26)
	CLOSE(30)
        OPEN(unit=26,file='PC_flucts',status='unknown')
        OPEN(unit=27,file='PC_variance',status='unknown')
        DO a=1,3*n
          WRITE(26,*)xfluct(a),yfluct(a),zfluct(a)
	  WRITE(27,*)xfluct(a)-PCxavg(a)**2,yfluct(a)-PCyavg(a)**2,zfluct(a)-PCzavg(a)**2
        END DO
        CLOSE(26)
	CLOSE(27)
	!Enough of that nonsense

	open(unit=99,file="covar_eig",status='unknown')
	WRITE(*,*)'Writing the eigenvalues of the covariance matrix to file...'
	do i=1,3*n
	  write(99,*)eiglam(i)
	end do
	close(99)

	END IF
	WRITE(*,*)'Finis'
	CLOSE(40)
	end subroutine

	subroutine project(n,nfrs)
	IMPLICIT NONE
	INTEGER,INTENT(in) :: n,nfrs
	INTEGER :: i,j,k,a,counter,countery,counterz,maxframe(1),minframe(1)
	DOUBLE PRECISION :: proj(n,3*n),RT(3*n,3*n),R(3*n,3*n),LMLmag(n,3*n),c(3*n,3*n),rmsf(n),var(nfrs)
        DOUBLE PRECISION :: projx(n,3*n),projy(n,3*n),projz(n,3*n),LML(3*n,3*n),chk(3*n),eiglam(3*n)
	DOUBLE PRECISION :: biglist(3*n,nfrs),QINV(n,n),rx(n,nfrs),ry(n,nfrs),rz(n,nfrs)
	REAL :: maxvar(n),minvar(n)
        CHARACTER(120) :: aa,protname
	rx=0.0
	ry=0.0
	rz=0.0
	R=0.0
        proj=0.0
	biglist=0.0
	WRITE(*,*)'Projections'
	OPEN(unit=20,file='Rmatrix',status='old')
        DO i=1,3*n
          DO a=1,3*n
            READ(20,*)R(i,a)
          END DO
        END DO
        CLOSE(20)
	OPEN(unit=20,file='RTmatrix',status='old')
        DO a=1,3*n
          DO i=1,3*n
            READ(20,*)RT(a,i)
          END DO
        END DO
        CLOSE(20)
	OPEN(unit=20,file='covariance_matrix.dat',status='old')
        DO i=1,3*n
          DO j=1,3*n
            READ(20,*)c(i,j)
          END DO
        END DO
        CLOSE(20)
	OPEN(unit=20,file='covar_eig',status='old')
        DO a=1,3*n
          READ(20,*)eiglam(a)
        END DO
        CLOSE(20)
	OPEN(unit=20,file='biglist.dat',status='old')
        DO k=1,nfrs
	  IF(MOD(k,1000) .EQ. 0)WRITE(*,*)'Reading frame ',k
	  DO i=1,3*n
            READ(20,*)biglist(i,k)
	  END DO
	END DO
	CLOSE(20)
        WRITE(*,*)'LML'
        !Check eigenvalues
        chk=0.0
        DO a=1,3*n
          DO i=1,3*n
            DO j=1,3*n
              chk(a)=chk(a)+RT(a,i)*c(i,j)*R(j,a)
            END DO
          END DO
          WRITE(*,*)"Check :",chk(a)-eiglam(a)
        END DO
        
        LML=0.0
        LMLmag=0.0
        rmsf=0.0
        DO a=1,3*n
          DO i=1,3*n
            LML(i,a)=(R(i,a)**2*eiglam(a))**0.5
          END DO
        END DO
	DO a=1,3*n
	  WRITE(aa,*)a
	  aa=adjustl(aa)
          counter=0
          IF(a .LE. 10)OPEN(unit=24,file='LML_PCAx_'//TRIM(aa)//'.dat',status='unknown')
          IF(a .LE. 10)OPEN(unit=25,file='LML_PCAy_'//TRIM(aa)//'.dat',status='unknown')
          IF(a .LE. 10)OPEN(unit=26,file='LML_PCAz_'//TRIM(aa)//'.dat',status='unknown')
          DO i=1,3*n
	    IF(MOD(i,3) .EQ. 1)THEN
              counter=counter+1
              LMLmag(counter,a)=SQRT(LML(i,a)**2+LML(i+1,a)**2+LML(i+2,a)**2)
            END IF
	    IF(a .LE. 10)THEN
	      IF(MOD(i,3) .EQ. 1)WRITE(24,*)counter,LML(i,a)
	      IF(MOD(i,3) .EQ. 2)WRITE(25,*)counter,LML(i,a)
	      IF(MOD(i,3) .EQ. 0)WRITE(26,*)counter,LML(i,a)
	    END IF
          END DO
	  CLOSE(24)
	  CLOSE(25)
	  CLOSE(26)
        END DO
        DO a=1,3*n
          WRITE(aa,*)a
          aa=adjustl(aa)
          OPEN(unit=24,file='LML_PCA_'//TRIM(aa)//'.dat',status='unknown')
          DO i=1,n
            WRITE(24,*)LMLmag(i,a)
          END DO
          CLOSE(24)
        END DO
        OPEN(unit=24,file='rmsf_pca.dat',status='unknown')      
        DO i=1,n
          DO a=1,3*n
            rmsf(i)=rmsf(i)+LMLmag(i,a)
          END DO
          WRITE(*,*)"RMSF? (nm) :",rmsf(i)
          WRITE(24,*)i,rmsf(i)
        END DO
        CLOSE(24)


        DO a=1,3*n
          WRITE(aa,*)a
          aa=adjustl(aa)
          OPEN(unit=20,file='PCA_proj_'//TRIM(aa)//'.dat',status='unknown')
          OPEN(unit=21,file='PCA_projx_'//TRIM(aa)//'.dat',status='unknown')
          OPEN(unit=22,file='PCA_projy_'//TRIM(aa)//'.dat',status='unknown')
          OPEN(unit=23,file='PCA_projz_'//TRIM(aa)//'.dat',status='unknown')
          counter=0
          countery=0
          counterz=0
          DO i=1,3*n
            IF(MOD(i,3) .EQ. 1)THEN
              counter=counter+1
              proj(counter,a)=(R(i,a)**2+R(i+1,a)**2+R(i+2,a)**2)**0.5
              IF(a .LE. 10)WRITE(*,*)counter,a,proj(counter,a)
              WRITE(20,*)counter,proj(counter,a)
              WRITE(21,*)counter,R(i,a)
            ELSE IF(MOD(i,3) .EQ. 2)THEN
              countery=countery+1
              WRITE(22,*)countery,R(i,a)
            ELSE IF(MOD(i,3) .EQ. 0)THEN
              counterz=counterz+1
              WRITE(23,*)counterz,R(i,a)
            END IF
          END DO
          CLOSE(20)
          CLOSE(21)
          CLOSE(22)
          CLOSE(23)
        END DO
	
	!Find extrema of projections and write frame number to file
	var=0.0
	minvar=0.0
	maxvar=0.0
	DO a=1,10 !First 10 normal modes
	  WRITE(aa,*)a
	  aa=adjustl(aa)
	  OPEN(unit=10,file='minframe'//TRIM(aa),status='unknown')
	  OPEN(unit=11,file='maxframe'//TRIM(aa),status='unknown')
	  var=0.0
	  minvar=0.0
	  maxvar=0.0
	  maxframe=0
	  minframe=0
	  DO k=1,nfrs
	    !IF(MOD(k,1000) .EQ. 0)WRITE(*,*)"Frame ",k
	    DO i=1,3*n
              var(k)=var(k)+RT(a,i)*biglist(i,k)
	    END DO
	  END DO
	  !Find the frames corresponding to the maximum and minimum structures
	  minframe=minloc(var)
	  WRITE(*,*)''
	  WRITE(*,*)minframe(1),var(minframe)
	  WRITE(10,*)minframe(1)
	  maxframe=maxloc(var)
	  WRITE(*,*)''
	  WRITE(*,*)maxframe(1),var(maxframe)
	  WRITE(11,*)maxframe(1)
	  CLOSE(10)
	  CLOSE(11)
	END DO
	
	WRITE(*,*)'LE4PD projections'
	OPEN(unit=24,file='QHAINVmatrix',status='old')
	DO a=1,n
	  DO i=1,n
	    READ(24,*)QINV(a,i)
	  END DO
	END DO
	CLOSE(24)
	OPEN(unit=24,file='protname.txt',status='old')
	READ(24,'(A)')protname
	protname=adjustl(protname)
	CLOSE(24)
        var=0.0
	maxframe=0
	minframe=0
	OPEN(unit=11,file=TRIM(protname)//'.g96',status='old')
	do i=1,7
	  read(11,*)
	end do
	do k=1,nfrs
	  IF(MOD(k,1000) .EQ. 0)WRITE(*,*)'Reading frame ',k
	  do j=1,n
	    read(11,*)rx(j,k),ry(j,k),rz(j,k)
	  end do
	!skip 8 lines
	  do j=1,8
	    read(11,*)
	  end do
	!come out of time loop
	end do
	CLOSE(11)
        DO a=1,10 !First 10 normal modes
	  WRITE(aa,*)a
	  aa=adjustl(aa)
	  OPEN(unit=10,file='minframe'//TRIM(aa)//'_LE4PD',status='unknown')
	  OPEN(unit=11,file='maxframe'//TRIM(aa)//'_LE4PD',status='unknown')
	  var=0.0
	  minvar=0.0
	  maxvar=0.0
	  maxframe=0
	  minframe=0
	  DO k=1,nfrs
	    !IF(MOD(k,1000) .EQ. 0)WRITE(*,*)"Frame ",k
	    DO i=1,n
              var(k)=var(k)+(QINV(a,i)*rx(i,k)+QINV(a,i)*ry(i,k)+QINV(a,i)*rz(i,k))
	    END DO
	  END DO
	  !Find the frames corresponding to the maximum and minimum structures
	  minframe=minloc(var)
	  WRITE(*,*)''
	  WRITE(*,*)minframe(1),var(minframe)
	  WRITE(10,*)minframe(1)
	  maxframe=maxloc(var)
	  WRITE(*,*)''
	  WRITE(*,*)maxframe(1),var(maxframe)
	  WRITE(11,*)maxframe(1)
	  CLOSE(10)
	  CLOSE(11)
	END DO
        end subroutine project

        
        
